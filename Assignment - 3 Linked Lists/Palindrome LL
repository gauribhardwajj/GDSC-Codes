ListNode* reversePart(ListNode* &mid){
        ListNode* p= mid->next;

        ListNode* prev= NULL;
        ListNode* curr= p;
        ListNode* forward= NULL;

        while(curr!=NULL){
            forward= curr->next;
            curr->next= prev;
            prev=curr;
            curr=forward;
        }
        return prev;
    }

    bool isPalindrome(ListNode* head) {

        if(head==NULL || head->next==NULL) return true;

        ListNode* temp= head;

        ListNode* slow= temp;
        ListNode* fast= head;

        while(fast->next!=NULL && fast->next->next!=NULL){
            slow=slow->next;
            fast= fast->next->next;
        }

        slow->next= reversePart(slow);
        slow= slow->next;

        while(slow!=NULL){
            if(temp->val!=slow->val) return false;
            temp=temp->next;
            slow=slow->next;
        }      

        return true;
    }
